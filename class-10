The Js intepreter processes 1 line at a  time. When statement needs data from function it stacks the new function on top of current task

In the interpreter, each execution context has its own va ri ables object. It holds the variables, functions, and parameters available within it. Each execution context can also access its parent's v a ri ables object. Each time a function is called, it gets its own execution context and va r i ables object.

If a JavaScript statement generates an error, then it throws an exception.
At that point, the interpreter stops and looks for exception-handling code.

If an error happens in a function and the function
does not have an exception handler, the interpreter
goes to the line of code that called the function.
In this case, the get Name () function was called by
greetUser(), so the interpreter looks for exceptionhandling
code in the greetUser() function (2).
If none is found, it continues to the next level,
checking to see if there is code to handle the error
in that execution context. It can continue until it
reaches the global context, where it would have to it
terminate the script, and create an Error object.

If you try to use a string in a
mathematical operation (other
than in addition), you do not get
an error, you get a special value
called NaN (not a number).
To create your own error, you use the following line:
`throw new Error('message`);
) ;

You can create a breakpoint
in your code using just the
debugger keyword. When the
developer tools are open, this
will automatically create a
breakpoint.